{"ast":null,"code":"import { inject } from '@angular/core';\nimport { tap } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { enviroments } from \"../enviroments/enviroments\";\nimport * as i0 from \"@angular/core\";\nexport class ProjectService {\n  getProjects() {\n    return this.http.get(this.API_URL + 'products.json');\n  }\n  constructor() {\n    this.http = inject(HttpClient);\n    this.API_URL = enviroments.apiURL;\n    this.projects = [];\n  }\n  addProject(project) {\n    return this.http.post(this.API_URL + 'products.json', project);\n  }\n  getProducts() {\n    return this.http.get(this.API_URL + 'products.json').pipe(tap(data => {\n      consol;\n    }));\n  }\n  static #_ = this.ɵfac = function ProjectService_Factory(t) {\n    return new (t || ProjectService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectService,\n    factory: ProjectService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","tap","HttpClient","enviroments","ProjectService","getProjects","http","get","API_URL","constructor","apiURL","projects","addProject","project","post","getProducts","pipe","data","consol","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/puurkos/Desktop/ANGULAR/FQOH/src/app/services/project.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {Observable, tap} from \"rxjs\";\nimport {Project} from \"../models/Project.model\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {enviroments} from \"../enviroments/enviroments\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  private http = inject(HttpClient)\n  private API_URL = enviroments.apiURL;\n  projects: Project[] = [];\n  getProjects(): Observable<Project[]>{\n    return this.http.get<Project[]>(this.API_URL+'products.json')\n  }\n  constructor() { }\n  addProject(project: Project):Observable<Project> {\n    return this.http.post<Project>(this.API_URL+'products.json',project);\n  }\n\n  getProducts() :Observable<Project> {\n    return this.http.get<Project>(this.API_URL+'products.json').pipe(\n        tap((data)=> {\n          consol\n        })\n    )\n  }\n  // getProduct(id: number): Observable<Project> {\n  //\n  // }\n\n}\n"],"mappings":"AAAA,SAAQA,MAAM,QAAmB,eAAe;AAChD,SAAoBC,GAAG,QAAO,MAAM;AAEpC,SAAQC,UAAU,QAAO,sBAAsB;AAC/C,SAAQC,WAAW,QAAO,4BAA4B;;AAKtD,OAAM,MAAOC,cAAc;EAIzBC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACC,IAAI,CAACC,GAAG,CAAY,IAAI,CAACC,OAAO,GAAC,eAAe,CAAC;EAC/D;EACAC,YAAA;IANQ,KAAAH,IAAI,GAAGN,MAAM,CAACE,UAAU,CAAC;IACzB,KAAAM,OAAO,GAAGL,WAAW,CAACO,MAAM;IACpC,KAAAC,QAAQ,GAAc,EAAE;EAIR;EAChBC,UAAUA,CAACC,OAAgB;IACzB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAU,IAAI,CAACN,OAAO,GAAC,eAAe,EAACK,OAAO,CAAC;EACtE;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACT,IAAI,CAACC,GAAG,CAAU,IAAI,CAACC,OAAO,GAAC,eAAe,CAAC,CAACQ,IAAI,CAC5Df,GAAG,CAAEgB,IAAI,IAAG;MACVC,MAAM;IACR,CAAC,CAAC,CACL;EACH;EAAC,QAAAC,CAAA,G;qBAlBUf,cAAc;EAAA;EAAA,QAAAgB,EAAA,G;WAAdhB,cAAc;IAAAiB,OAAA,EAAdjB,cAAc,CAAAkB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}